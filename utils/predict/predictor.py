"""stock_purchase_recommendation.ipynb

Automatically generated by Colab.

Original file is located at

# Stock Purchase Recommendation

<pre>
Name            : Falah Mandira Irawan
Email           : falah.mandira10@gmail.com
Username        : falah_mandira_irawan
</pre>

"""
from keras.layers import TFSMLayer
from utils.monitor.monitor_system import monitor_resources 

import tensorflow as tf
import pandas as pd
import os

class FinancialDataHandler:
    def __init__(self, dataset_dir='datasets'):
        self.dataset_dir = os.path.normpath(os.path.join(os.path.dirname(__file__), '..', '..', dataset_dir))

    def load_csv(self, filename='financial_metrics.csv'):
        monitor_resources("Loading CSV")
        csv_path = os.path.join(self.dataset_dir, filename)
        df = pd.read_csv(csv_path)
        monitor_resources("Finished Loading CSV")
        return df
    

class FinancialDataPreprocessor:
    def __init__(self):
        self.normalizer = tf.keras.layers.Normalization(axis=-1, dtype=tf.float32)

    def compute_financial_metrics(self, financial_df: pd.DataFrame) -> pd.DataFrame:
        monitor_resources("Computing Financial Metrics")
        metrics = pd.DataFrame()
        metrics['ROE (%)'] = (financial_df['Total Profit (Loss)'] / financial_df['Total Equity']) * 100
        metrics['ROA (%)'] = (financial_df['Total Profit (Loss)'] / financial_df['Total Assets']) * 100
        metrics['D/E Ratio'] = financial_df['Total Liabilities'] / financial_df['Total Equity']
        metrics['Equity Ratio (%)'] = (financial_df['Total Equity'] / financial_df['Total Assets']) * 100
        metrics['A/E Ratio'] = financial_df['Total Assets'] / financial_df['Total Equity']
        metrics['Leverage'] = financial_df['Total Liabilities'] / financial_df['Total Equity']
        monitor_resources("Finished Computing Financial Metrics")
        return metrics

    def normalize_features(self, data: pd.DataFrame) -> tf.Tensor:
        monitor_resources("Normalizing Features")
        self.normalizer.adapt(data.values)
        normalized_data = self.normalizer(data.values)
        monitor_resources("Finished Normalizing Features")
        return normalized_data


class ModelHandler:
    @staticmethod
    def get_model(model_path):
        monitor_resources("Loading Model")
        model = TFSMLayer(model_path, call_endpoint='serving_default')
        monitor_resources("Finished Loading Model")
        return model
    

class StockRecommendationHandler:
    @staticmethod
    def avg_features(tensor, feature_names=None):
        monitor_resources("Averaging Features")
        if feature_names is None:
            feature_names = ['ROE (%)', 'ROA (%)', 'D/E Ratio', 'Equity Ratio (%)', 'A/E Ratio', 'Leverage']
        avg_values = tf.reduce_mean(tensor, axis=0)
        monitor_resources("Finished Averaging Features")
        return {name: round(float(val), 2) for name, val in zip(feature_names, avg_values.numpy())}

    @staticmethod
    def avg_probability(y_prob):
        monitor_resources("Averaging Probability")
        avg_prob = round(float(tf.reduce_mean(y_prob).numpy()) * 100, 2)
        monitor_resources("Finished Recommending")
        return avg_prob


def stock_purchase_recommendation(
    financial_data=None,
    financial_csv=None,
    model_path=None
):
    base_dir = os.path.dirname(os.path.abspath(__file__))

    data_handler = FinancialDataHandler()
    if financial_data is not None:
        df = financial_data
    else:
        if financial_csv is None:
            financial_csv = os.path.normpath(os.path.join(base_dir, '..', '..', 'datasets', 'financial_metrics.csv'))
        df = data_handler.load_csv(financial_csv)

    preprocessor = FinancialDataPreprocessor()
    financial_metrics_df = preprocessor.compute_financial_metrics(df)
    X_tensor = preprocessor.normalize_features(financial_metrics_df)

    model_handler = ModelHandler()
    if model_path is None:
        model_path = os.path.normpath(os.path.join(base_dir, 'models'))
    
    model = model_handler.get_model(model_path)
    y_prob = list(model(X_tensor).values())[0]

    avg_metrics = StockRecommendationHandler.avg_features(
        financial_metrics_df.values, financial_metrics_df.columns.tolist()
    )
    avg_prob = StockRecommendationHandler.avg_probability(y_prob)

    return {
        "avg_metrics": avg_metrics,
        "rekomendasi (%)": avg_prob
    }
